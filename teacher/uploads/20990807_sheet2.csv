"学籍番号","提出日時","文法定義を構成する「終端記号」とは何かを説明せよ。","","（必須）本日の授業に関する質問を書け。質問が全く無い場合は本日の講義の要点を書け。項目の箇条書きではなく、文章形式で書くこと。また、途中に改行を含めないこと。","中西からの回答","（選択）授業の進め方などについて、感想や意見があればどうぞ。無ければ記入不要。","中西からの回答"
"N07081","10/7/14 21:13","終端記号は、形式文法における生成規則の記述に使われる記号であり、それ以上文法的に分解されることがない。C言語を例にすれば、識別子,数値,文字列,演算子,区切り記号などがある。","","KCLは他のに比べて、どういう利点があるんですか?また、逆に欠点などはありますか?","なぜ直接機械語にコンパイルしないのか、あるいはインタープリタで実行しないのか、という質問かと思います。ググってもらうとわかりますが、Cのソースに変換することが簡単であったこと、Cのソースであれば人がそれを最適化できるなどが利点です。","",""
"N08033","10/7/14 14:53","文法の終わりの記号","×","今回の要点は形式文法の文脈自由文法がプログラミングで多く使われることである。","100字ぐらい書いてください。","",""
"N09010","","未回答","","未回答","","",""
"N09051","10/9/14 23:33","形式文法での生成規則の記述に使われる記号の事で、その文法で生成される文字列の一部を構成する要素。記号ではΣ。","","コンパイラの処理順序は字句解析→構文解析→意味解析の順番で行われる。字句解析とは文字を1つ1つ調べ、意味のある最小単位の要素にまとめる事。構文解析は字句解析で得た要素の列をその言語の文法規則にあっているか調べる事であり、ここで間違っていればエラーが出力される。","OK","",""
"N09075","","未回答","","未回答","","",""
"N10010","10/7/14 18:09","形式文法の生成規則の入力に現れ、その生成規則によってそれ以上は変換されない記号である。","","コンパイラの処理順序は字句解析から始まり、構文解析、意味解析、最適化、コード生成と続く。最適化する際メモリアクセスを極力減らすのは、読み込む速さがメモリよりレジスタの方が早いからである。結果生成物の実行スピードが上がる。","OK","",""
"N10093","","未回答","","未回答","","",""
"N10101","10/7/14 15:47","終端記号とは、形式文法で生成されるソースコードに出てくるintやmainなどの文字列の一部を構成する要素。","","前回までの講義の復習を最初にして、その後に今回の講義をした。主に終端記号や非終端記号などについての講義だった。今回の講義のテーマにはオートマトンと形式言語の知識も必要だったので、授業で軽く復習をして、簡単な演習問題もした。","何をやったかを羅列するのではなくて、あなたが重要と思った講義内容の要点を書いてほしいのです。よろしく。","",""
"N11016","10/7/14 18:48","形式文法において生成規則の記述に使われる記号のことである。終端記号はその文法で生成される文字列の一部のことである。","","今回の講義ではコンパイルなどについて学んだ。コンパイルは手順で言うとソースプログラムからコンパイラ、中間言語、インタープリタから出力までが一通りの行程である。またコンパイルする上で整数の変数と小数の整数のプログラムをコンパイルすると警告がでる。Cのソースをコンパイルするときに普通にコンパイルするのが一般的だが、難しくなってくるとソースが2、3ある場合もある。","OK

ソースコードのファイル数は、２～３どころではなくてもっと多い場合も結構あります。","",""
"N11023","","未回答","","未回答","","",""
"N11055","10/7/14 14:51","文で実際に使用される末端の記号。","","講義中に取り扱っていた""id=id+id""のトークンidは非終端記号であるという解釈でよろしいのでしょうか。","トークンと非終端記号は違います。","",""
"N11058","10/8/14 21:08","形式文法における生成規則の入力や出力に現れ、その生成規則によってそれ以上は変換されないもの","","コンパイラの内部構成は一文字一文字を調べて、意味のある最小単位の要素(トークン)にまとめる字句解析、トークンの列がその言語の文法規則にあっているかを調べる構文解析、ソースコード内に書かれた変数の型や文が言語の記述仕様に沿っているかチェックする意味解析、中間言語から最終的な出力コードを得るコード生成の順に進めていく。","OK","",""
"N11061","10/9/14 11:52","終端記号は形式文法における生成規則の記述に使われる記号で形式文法における生成規則の入力や出力に現れる。それ以上は変換されない、つまり置き換えられない終わりを示す。","","トークンはプログラミング言語のソースコードを構成する単語や記号の最小単位のことで、要素をタグつけし、する。このトークンを字句解析でまとめ、構文解析で言語の文法規則を確認、問題なければ意味解析でソースコード内の変数の型や文が最適か確認、目的プログラムを出力するコード生成を行い、コンパイルを成立させる。","OK","",""
"N11072","10/9/14 23:30","文法で生成される文字列の一部を構成する要素","","オートマトンと形式言語みたいな式が出ましたが正直意味が分かりませんでした。どうやれば少しでも理解できるようになるコツはありますか?","「オートマトンと形式言語みたいな式」の意味がわかりません。どれのことでしょうか？","",""
"N11076","10/7/14 14:38","終端記号とは形式文法での生成規則の記述において使われる記号","","終端記号などのスライドにあったNΣPSなどの文字はなんですか?Sbなど変わっていく過程がいまいち理解できませんでした","集合につけた名前です。導出の過程は、大文字のところに、生成規則を適用して書き換えるものです。","",""
"N11087","10/7/14 15:02","通常英小文字で表される、それ以上変化しない記号","","文法の名前は覚えなくてもよいといっていましたが、試験に出ないということですか?","文脈自由文法以外は、試験範囲外です。","講義の最後に5～10のアンケートの回答時間が欲しいです。","時間外学習も必要ですから、その一環としてミニッツペーパを書いてください。"
"N11105","","未回答","","未回答","","",""
"N12001","10/7/14 22:49","形式文法における生成規則の入力と出力に現れ、その生成規則によってそれ以上変換することのできない記号である。","","コンパイルするときの細かい動きとそのための動作についてと最小単位のトークンについて学び、木構造等で構文の解析をした。また、コードを生成するときでの最適化する理由などを学びました。残った時間で少しの形式言語論の生成規則を少し学びました。","何をやったかを羅列するのではなくて、あなたが重要と思った講義内容の要点を書いてほしいのです。よろしく。","",""
"N12003","10/8/14 1:56","文法を構成する文字でそれ以上変換することの出来ない文字","","ほとんどの言語は文脈自由文法が元となっていると言っていましたが元となっていない言語はどのようなものがあるのですか?","たぶん無いと思います。","",""
"N12006","10/7/14 16:09","終端記号とは,その文法で生成される文字列の一部を構成する要素","","コンパイラとインタープリタの説明図がいまいち理解できなかった","ここに書ききれませんので、505号室まで質問に来てください。歓迎します。
授業中に質問してくれると、もっと良いのですが。。。","",""
"N12007","10/10/14 13:12","それ以上変換することの出来ない記号","","コンパイラとインタープリタの復習、軸解析、構文解析、意味解析、コード生成の流れ。形式文法の種類(文脈自由文法など)定義など","何をやったかを羅列するのではなくて、あなたが重要と思った講義内容の要点を書いてほしいのです。よろしく。","",""
"N12009","","未回答","","未回答","","",""
"N12010","10/7/14 15:03","形式文法における生成規則の記述に使われる記号で、生成される文字列の一部を構成する要素である。","","最適化の良し悪しによってコンパイラの値段が変わると仰っていましたが具体的に何が違うのでしょうか?","有償のコンパイラは、無償のコンパイラに比べて、生成される機械語のサイズが小さい、実行速度が速い（メモリアクセスを減らしたり、余計な処理をループの外に出したりして）、などの特長があります。","",""
"N12011","10/9/14 22:15","文法で生成される文字列の一部を構成する要素。形式文法における生成法則の入力や出力に現れ、その生成法則によってそれ以上は変換されない。","","形式文法には、帰納的加算文法、文脈依存文法、正規文法、文脈自由文法がある。それらの文は非終端記号、終端記号、生成規則、開始記号というもので構成される。","はい。それぞれを説明できることが大事です。","",""
"N12013","","未回答","","未回答","","",""
"N12016","","未回答","","未回答","","",""
"N12018","10/7/14 14:43","終端記号とは,これ以上分解,変換できない記号のことを表す.たとえば10を終端記号に分解すると1と0に分けられる.","","終端記号の説明が何とも言えないわかりにくさがある.そして説明しにくい.ファイルの終わりを表す「EOF」も終端記号ですか?","C言語でEOFと書いているのはマクロ名です。変数名や関数名と同じように、文法的には「名前」であり、終端記号であるアルファベットと数字・記号で構成されている文字列です。","",""
"N12020","10/7/14 23:09","文法が生成される文字列の一部の要素である。","","授業中に出てきたscopeと言う言葉なんですが、変数の有効範囲はC演習1で学びましたが、scopeという言葉は初めて聞きました、scopeとはいったいなんなのでしょうか?","変数の有効範囲のことを英語ではスコープと呼びます。それだけのことです。","",""
"N12022","10/7/14 17:18","生成規則によって、これ以上変換することができない文字のことをいう。一般的に非終端文字は大文字で、終端文字は小文字で表す。","","コード生成の最適化について質問です。最適化について調べていると「アセンブラ言語より高級言語のほうがよい」というwebページを見つけました。そこには「適切な最適化コンパイラがあれば、アセンブラ言語で記述した場合の90%の効率で処理できる。最新の複雑なハードウェアを使えばアセンブラのプログラムより速くなる。」と書いてありました。近年のコンパイラは熟練のアセンブラプログラマーより処理速度の速いものを作れるほどすごいんでしょうか?","そうです。たとえば、みなさんが使っている gcc はフリーソフトウェア、つまり無償ですが、数十万円ぐらいするCコンパイラもあります。最適化の優秀さを商売にしているわけです。","",""
"N12025","10/7/14 16:04","それ以上変換されない記号","","文脈自由文法の生成規則について学びました。開始記号Sから終端記号Σまでの間を導出といいます。終端記号は全て小文字で表示された文字列です。例えば、①S→Sa,②S→aの場合。こういった①や②のことを生成規則Pで表します。また、①は非終端記号であり②は終端記号です。","OK","",""
"N12026","","未回答","","未回答","","",""
"N12027","10/9/14 11:17","終端記号は、形式文法における生成規則の記述に使われる記号であり、その文法で生成される文字列の一部を構成する要素。_x000D_
終端記号は、その生成規則によりそれ以上は変換されない。","","KCLで書かれたソースプログラムを、KCLのコンパイラで中間言語(=C言語のソースプログラム)にする とありましたが、C言語ではなくわざわざKCLでソースを書くことに、どのようなメリットがありますか?","KCLは関数型言語なので、関数型でプログラミングすることに意義があるわけです。（C言語は手続き型、あるいは代入型言語です）","",""
"N12029","10/7/14 14:50","文は終端記号で表現されており文章等を構成する記号である。","","中間コードとは具体的な中身はどのようなものでしょうか?","いろいろです。gccの場合、アセンブリ言語に落としていますが、このときはアセンブリ言語が中間言語になります。","",""
"N12031","10/9/14 14:30","形式文法の生成規則で使われる記号で、非終端記号とは異なり、生成規則によって分解されない。","","コンパイル処理について、ソースが字句解析→構文解析→意味解析→コード生成といった処理がされ、構文のチェックや変数の有効範囲(スコープ)などが定められていく。","OK","",""
"N12034","10/9/14 15:04","文の終端を表す記号","","多くのプログラミング言語で文脈自由文法が採用される理由はなんですか。","言語を定義するときに、文脈自由文法でほとんど書けたから、ということでしょう。","",""
"N12035","10/7/14 17:51","形式文法の生成規則で、それ以上変換されないもの","","前回のコンパイラとインタープリタの違いについての復習とKCLの紹介、オートマトンと形式言語で学習した形式文法について学習した。文は終端記号で構成され、その集合を文と呼ぶ。","○○を学習した、というのは不要です。学習した内容から重要だと思うことについて、まとめて書いてください。","",""
"N12036","","未回答","","未回答","","",""
"N12039","10/8/14 11:23","終端記号とは、形式文法における生成規則の入力や出力に現れ、その生成規則によってそれ以上は変換されないものである。識別子や数値、文字列、演算子、区切り記号などが終端記号である。","","形式文法には帰納的加算文法、文脈依存文法、文脈自由文法、正規文法などがあるが、多くのプログラミング言語で構造仕様を文脈自由文法で定義している。また、形式文法の定義は、非終端記号、終端記号、生成規則、開始記号である。","OK","",""
"N12041","10/7/14 15:02","形式文法における生成規則において大文字で表現され、まだ処理が可能な記号は非終端記号であり、終端記号はそれ以外の記号のことを指す。","","変数の有効範囲のスコープはグローバル変数においては全ての範囲で有効範囲になるのですか?","まず、有効範囲は英語ではスコープと言いますから、「有効範囲のスコープ」というのはおかしい。
C言語におけるグローバル変数については「C演習I」の教科書を復習してください。","",""
"N12042","","未回答","","未回答","","",""
"N12043","10/7/14 17:13","文字を生成する過程でそれ以上変化することのできない記号である。これとは逆にまだ変化する余地のある記号を非終端記号という。Cやjavaのコードに用いられている""+""や""=""も終端記号である。","","コンパイラはコード生成の時、中間コードを生成する。その際コードの最適化を行う。最適化にはメモリアクセスをなるべく減らすようにする。これはメモリアクセスによるフォン・ノイマンボトルネックによる処理時間の増加を減らすためである。","OK","",""
"N12045","10/7/14 16:10","終端記号は、形式文法における生成規則の入力や出力に現れ、その生成規則によってそれ以上は変換されない記号。","","形式文法の構成要素は、「終端記号」の有限集合、「非終端記号」の有限集合、「生成規則」の有限集合,開始記号から構成される。生成規則はある単語に適用され、規則の左側にある単語を右側にある記号列で置換する。","OK","",""
"N12046","10/8/14 11:13","形式文法における生成規則の中でそれ以上変換できない記号","","形式文法における生成規則はなぜ基本的に大文字から小文字への変換であるのか","単にわかりやすいように、非終端記号を大文字で書いているだけです。","",""
"N12048","10/7/14 20:41","文(語)を構成する要素の集合","","コンパイラはソースプログラムを実行形式に変換してから実行すること。インタープリタはソースプログラムを直接実行すること。javaなどは2つの組み合わせ型になっている。形式文法は非終端記号、終端記号、生成規則、開始記号の4つの要素からなり、開始記号から生成規則に従って終端記号のみの集合を生成する。この生成されたものが文である。","OK","",""
"N12049","","未回答","","未回答","","",""
"N12051","10/10/14 0:06","終端記号とは形式文法に表れ、その生成規則によってそれ以上変換されないものを指している。","","コード生成時に計算結果が同じものに同じ結果を与えるのは合理的なのはわかりますが、どうやって同じものだと判断しているんでしょうか?","良い質問です。制御フローを作成してどの変数がどこで使われているかを調べるのが一般的です。これ以上はコンパイラという科目の講義をつくらないと説明が膨大になってしまいます。興味があれば、図書館にあるコンパイラの本を手に取って30分ほど読んでみてください。最適化はどの本でも取り上げているはずです。","",""
"N12053","10/7/14 15:00","ソースコードにおいて実際に使用されている記号・文字","","文法規則に使われている記号の、由来や意味(なにかの略記であるなど)があれば知りたいです。","どの記号のことでしょうか？","",""
"N12055","10/7/14 14:52","形式文法において、その生成規則によってそれ以上変換されない記号のことである。","","形式文法の定義としては、非終端記号の集合、終端記号の集合、生成規則の集合、開始記号である。非終端記号は、その生成規則において置換される記号である。終端記号は、その生成規則においてそれ以上変換されない記号である。生成規則は、記号を変換するためのものである。変換は開始記号から始まり、終端記号のみで構成されているものを文と言い、それまでの行程を導出と言う。","OK","",""
"N12056","10/7/14 14:47","文法で生成される文字列の構成要素で、生成規則によってそれ以上変換されない。","","形式文法の定義として、非終端記号、終端記号、生成規則、開始記号があり、開始記号から生成規則に則って文を導出する。その文の集合を言語という。一般的に終端記号は小文字で、非終端記号は大文字で表される。","OK","",""
"N12057","","未回答","","未回答","","",""
"N12058","10/7/14 15:27","終端記号は形式文法における生成規則の入力や出力に現れる。そして生成規則によってそれ以上は変換されない。ある文字に対する変換規則がない場合これは終端記号といえる。ある文法によって定義される形式言語は、その文法によって生成される文字列の集合であり、 終端記号のみからなる 。","","KCLに欠点はあるんですか。","使ったことがありませんし、わかりません。ところで、なぜ欠点を聞きたいのでしょうか？長所は聞かないの？","",""
"N12059","10/7/14 17:05","形式文法における生成規則の入力や出力に現れ、その生成規則によってそれ以上は変換されないものである","","コード生成時に機械語のオブジェクト形式を作成するとき、ファイルとして出力しない場合の例はどのような物がありますか?","コンパイラではオブジェクトファイルを作るのが普通です。みなさんがC演習で一気に実行形式まで作成しているときも、コンパイラは少なくともメモリ上にはオブジェクトを作成している。","",""
"N12060","","未回答","","未回答","","",""
"N12065","10/7/14 15:13","生成規則における右側で使われる小文字であり、例だとS→aの場合、aが終端記号である。生成規則の順番によってその組み合わせが異なる。終端記号の集合を文といい、文の集合を言語という。","","最適化の際、不要な計算をループの外に出しますが、もし、ソースコード→オブジェクト形式を作り、ソースコードに戻した場合、最初のソースコードと戻したソースコードは異なる場合があるんですか?_x000D_
また、メモリアクセスを減らす場合、減らすことができるもの、減らすことができないものはどういった物がありますか?","どうでしょうか、わかりません。ふつう、戻すことをしませんから。
メモリアクセスを減らす例は授業資料で説明しているとおりです。減らせないものはそれ以外ということです。","第1回目のnoodleをやってなくて、今からやろうと思ったんですが、出来ませんでした。成績に関係なく、問題と答えを教えて頂くことはできますか?","ポータルシステムで案内しましたように、当面は、開始日から4週間解答できるようにしました。"
"N12067","","未回答","","未回答","","",""
"N12068","10/10/14 13:13","終端記号とは形式文法における生成規則の記述を行う際に用いられる記号であり、その文法で生成される文字列の一部を構成する要素の事である。","","形式文法の所で文脈自由文法では多くのプログラミング言語がこの文法で定義されているとあるが、これ意外で定義されているプログラミング言語はどんなものがあるのでしょうか?","わかりません。それを知ったところで、あまり意味は無いと思うのですが。","",""
"N12069","10/7/14 15:14","終端記号は文法で生成される文字列の一部の構成する要素であり、形式文法における生成規則の入力や出力に現れ、その生成規則によってそれ以上は変換されない。","","フォンノイマンボルトネック：通常のコンピューターはプログラム内蔵方式なので、 ボトルネックが生じる。メインメモリに入れられたプログラムから、命令を1つずつ順番に取出しCPU で実行してゆくが、メインメモリとCPUとを結ぶ経路は原則的に1本であり、これがボトルネックとなる。計算を速くするために変数にメモリではなくレジスタを割り当てる。形式文脈自由文法：形式文脈自由文法は、多くのプログラミング言語の構文仕様がこの文法で定義されている。","命令だけではなく、データアクセスもそうです。だからバスをデータバスと命令バスに分けるというハーバードアーキテクチャが考えられた。という話は、「計算機アーキテクチャ」の授業で学んだはずだよね。","",""
"N12070","10/7/14 15:46","形式文法で生成規則に使われる記号であり、その生成規則においてそれ以上変換させることがない記号である。","","練習問題の答え方で文章では答えられるが、L={}の形での答え方がよくわからないので教えて下さい。","何を教えたらよいのやら。生成される文をいくつか作れば、そこから一般形の表現を書けると思うのですが。。。","",""
"N12073","10/7/14 14:56","終端記号は出現するとその生成規則ではそれ以上変換をしないことを表す。終端記号は生成規則の一部となっている。例えばS→Sbという生成規則があるとすると、bが終端記号にあたる。これを見てわかるようにbには生成規則が存在しないためそれ以上は変換ができない。またS→Sbを見て分かるようにbは生成規則の一部となっている。","","他にもKCLのように大学や企業等で開発された独自の言語はありますか?","いろいろありますよ。なお、KCLは、Gnu Common Lisp の原型として取り入れられました。","",""
"N12075","10/7/14 15:04","終端記号とは、文法形式における生成規則によってそれ以上変換できない記号のこと","","コード生成の中間コードはどんなものですか?","中間言語はそれぞれ違うのですが、例えば、C言語をコンパイルしてアセンブリ言語にすると、それを中間言語と言っても良い。","ムードルの提出期間をその日中から伸ばしてほしい","その理由は？"
"N12076","10/7/14 14:43","入力や出力に現れそれ以上変換されないのが終端記号　例 S→a　S→Sb","","今回の授業中に何回注意されても故意に寝ているかのような体制で寝ている人がいましたが何回か注意されると減点されるなどの処置はないんですか?","故意ではないでしょうが、よほど眠かったのでしょう。目に余るほど他の皆さんの学習に悪影響を与える場合には、退室してもらいます。","",""
"N12077","10/9/14 14:37","終端記号は、プログラムやプログラムの中にある式を1文字1文字を調べた時に現れる演算子などの文字列を結合させるものである。","","VBについてですが、初心者用や教育用の言語として使われていることがわかりました。VBによって開発されているものはありますか。","VBで作成されている製品はとても多いです。企業では、製品によりまずが、VBでコーディングしている人も多い。","",""
"N12079","10/7/14 15:14","そのまま出力しても問題ないもの、それ以上分解できない記号の事で最終的には言語は終端記号のみになる。","","形式言語の定義には非終端記号、終端記号、生成規則、開始記号があり、開始記号より生成規則にしたがって非終端記号から終端記号を生成する。この過程を導出という、非終端記号が有る限り続け、非終端記号が無くなった状態を言語といい導出はここで終わる。一般に非終端記号は大文字、終端記号は小文字を用いる。","OK","",""
"N12080","10/10/14 1:06","生成規則による置き換えルールにおいて、他の記号に置換することができない記号列を指す。","","現在、多様なプログラミング言語で文脈自由文法が使われているとのことですが、実用的に使われだした時期は大体いつからなのでしょうか。","何が実用的に使われだした時期ですか？少なくとも1960年頃には、プログラミング言語も形式言語理論もできていたわけです。","",""
"N12081","","未回答","","未回答","","",""
"N12082","10/7/14 14:58","終端記号とは、文の終わりとなりえる記号である。終端記号はよく、小文字で表記され、終端記号の集合はΣで表記される。","","文脈自由文法の利点や短所を知りたいです。","授業で言いましたように、現在のプログラミング言語は文脈自由文法に従っているということぐらいでしょう。あとはすみませんが、ご自分で調べてください。","",""
"N12083","","未回答","","未回答","","",""
"N12085","","未回答","","未回答","","",""
"N12086","10/7/14 15:12","生成規則によって、これ以上変換されない文","","レジスタとキャッシュメモリは速度の違い以外に何か大きな違いはありますか?","容量がまったく違う。","",""
"N12087","10/7/14 15:12","CFG上にある文法の、文脈自由文法などで記述された文法の最後に生成される記号。","","本日の講義の要点は、意味解析は変数のスコープなどソースコード上で意味のある文を知り、コード生成では実際に練習問題を解き、形式文法上の開始記号Sや、大文字で記述される非終端記号、小文字で記述される終端記号、そして記号の意味を学んだあと生成規則を学んだ。","何をやったかを羅列するのではなくて、あなたが重要と思った講義内容の要点を書いてほしいのです。よろしく。","",""
"N12088","10/7/14 15:48","形式文法における生成規則の記述に使われる記号の一つで、その規則で生成される文字列の構成要素となる。その内、生成規則によってそれ以上導出ができなくなったものを終端記号と呼ぶ。","","ほとんどのプログラミング言語が文脈自由文法で記述されていると言われていましたが、他の形式文法で記述されるプログラミング言語はあるのでしょうか。また、それはどのような部分に活用されているのでしょうか。","文脈依存文法については、この授業でとりあげません。文脈依存文法（でかつ文脈自由文法ではない文法）に基づくプログラミング言語は無いと思います。","",""
"N12089","","未回答","","未回答","","",""
"N12090","10/9/14 22:28","生成規則によってそれ以上新たな記号に変換されない記号である。","","コンパイラは主に3つの処理を行っている。字句解析では、文字を意味のある最小単位の要素にまとめ、構文解析ではそのトークンの列がその言語の文法規則に合っているかを調べる。そして、意味解析では型のチェックなどを行う。","最後にコード生成・最適化をします。これも忘れてはならない機能です。","",""
"N12095","10/7/14 14:57","生成規則で生成される言語の終わりを示す記号","","中間コードを生成する理由を教えてください","最適化しやすい、アーキテクチャの異なるCPUに対応しやすい（機械命令が異なるので）。","",""
"N12096","10/8/14 9:13","形式文法における生成規則の記述に使われる記号である。終端記号は、その文法で生成される文字列の一部を構成する要素である。終端記号はこれ以上変換することができず、生成規則の最後になることが特徴である。","","文脈依存文法とは具体的にどのようなものなのですか?また、どのようなプログラミングでこの文法が使われていますか?","文脈依存文法については、この授業でとりあげません。文脈依存文法（でかつ文脈自由文法ではない文法）に基づくプログラミング言語は無いと思います。","",""
"N12097","10/7/14 15:17","その文法において、それ以上変換されない記号のこと。","","前回の復習として、コンパイラがソースプログラムを機械語に変換する際に行う解析について確認した。ソースに含まれる文字を調べてトークンの列にまとめ、文法規則に従っているか、プログラムとして正しく書かれているかをチェックする。後半では形式文法の定義と文法規則から文を生成する方法を確認した。","○○を学習した、というのは不要です。学習した内容から重要だと思うことを選び、それについてまとめて書いてください。","",""
